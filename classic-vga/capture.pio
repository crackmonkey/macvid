.program vidcap
.side_set 1

jmp pin acquireline side 0 ; vsync high (inactive), grab a scanline
vsync:
    wait 0 pin 2 side 0 ; wait for a vsync pulse
    wait 1 pin 2 side 0 ; wait out the vsync pulse
set x, 23 side 0
vback_porch: ; 24 lines
    wait 0 pin 1 side 0
    wait 1 pin 1 side 0
    jmp x-- vback_porch side 0

acquireline:
wait 0 pin 1 side 0 ; wait for HSYNC low (start)
; load 178 into x, HBLANK time: HSYNC to start of data
; we should have plenty of time to do this in HBLANK
set x, 0b001 side 0
in x, 3 side 0
set x, 0b1011 side 0
in x, 4 side 0
in null, 24 side 0
mov x, isr side 0
mov isr, null side 0 ; clear ISR for actual data
jmp x-- dec side 0
dec:
wait 0 pin 1 side 0 ; wait for HSYNC low
acquireline_wait: ; hblank back porch
  jmp x-- acquireline_wait side 0 [7] ; 8 cycle (1px) wait

; pixloop_512 makes eight 64-bit acquisitions for a total of 512 pixels.
set y, 7 side 1
pixloop_512:
    ; 0x4 >> 24 = 64
    set x, 4 side 1
    in x, 4 side 1 
    in null, 24 side 1 
    mov x, isr side 1 
    mov isr, null side 1 ; clear ISR for actual data
    ; skip past the nops because the loop setup took those cycles for the first pixel
    jmp x-- pixloop_sample side 1 
    pixloop: ; 8 clocks
        nop side 1 [2]
    pixloop_sample:
        in pins, 1 side 1 [3]
        ;nop side 1 [3]
        jmp x-- pixloop side 1
    jmp y-- pixloop_512 side 1
% c-sdk {

// input pins must be sequential, video, hsync, vsync, debug output
uint vidcap_program_init(PIO pio, uint video_pin) {
   uint sm = pio_claim_unused_sm(pio, true);
   uint offset = pio_add_program(pio, &vidcap_program);

   pio_gpio_init(pio, video_pin);
   pio_gpio_init(pio, video_pin+1); // hsync
   pio_gpio_init(pio, video_pin+2); // vsync
   pio_gpio_init(pio, video_pin+3); // for debugging
   pio_sm_set_consecutive_pindirs(pio, sm, video_pin, 3, false);
   pio_sm_set_consecutive_pindirs(pio, sm, video_pin+3, 1, true);

   pio_sm_config c = vidcap_program_get_default_config(offset);
   sm_config_set_in_pins(&c, video_pin);
   sm_config_set_in_shift(&c, true, true, 32); // auto-push
   sm_config_set_sideset_pins(&c, video_pin+3);
   sm_config_set_jmp_pin(&c, video_pin+2);
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
   pio_sm_init(pio, sm, offset, &c);
   return sm;
}
%}
